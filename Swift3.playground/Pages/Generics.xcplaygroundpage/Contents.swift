//: [Anterior](@previous)
//: # Generics
import Foundation

//: Vejamos a fun√ß√£o abaixo que troca dois valores:
func swapValues(a: inout Int, b: inout Int) {
    let temp = a
    a = b
    b = temp
}

var a = 3, b = 5

swapValues(a: &a, b: &b)
a
b

//: - Note: O **&** indica que est√° sendo utilizado o endere√ßo das vari√°veis
//:

//: Esta fun√ß√£o funciona com valores inteiros apenas. Caso desej√°ssemos
//: criar uma fun√ß√£o para troca de valores Double teriamos que fazer uma fun√ß√£o
//: para tal, e outra para String e assim por diante. Por√©m, tirando as diferen√ßas
//: de tipagem todos os c√≥digos seriam id√™nticos.
//:
//: *Generics* √© um recurso de algumas linguagens para resolver este tipo de
//: problema. Ele permite definir um c√≥digo gen√©rico(!?! ü§î) para qualquer
//: tipo, ou para um conjunto de tipos:

func swapValues<T>(a: inout T, b: inout T) {
    let temp = a
    a = b
    b = temp
}

//: Esta fun√ß√£o define como deve ser a troca de valores para quaisquer par√¢metros
//: a e b, de qualquer tipo **T**, desde que a e b perten√ßam ao mesmo tipo.
//:
//: Com este √∫nico c√≥digo podemos resolver o mesmo problema para diversos
//: tipos de dados:
var c = 3.5, d = 5.1

swapValues(a: &c, b: &d)
c
d

var e = "String1", f = "String2"

swapValues(a: &e, b: &f)
e
f

//: Caso a restri√ß√£o de tipos iguais n√£o seja respeitada, o compilador
//: apresentar√° um erro:
//swapValues(a: &c, b: &e)

//: - Note: Generics podem ser utilizados em m√©todos de um tipo de forma similar
//; e tamb√©m para criarmos tipos gen√©ricos.

//: [Pr√≥ximo](@next)

